import React, { useState } from "react";
import { Appointment } from "../../modules/appointments/types/appointment";
import PatientProfileModal from "./components/PatientProfileModal";
import FollowUpModal from "./components/FollowUpModal";
import ViewMedicalRecordModal from "./components/ViewMedicalRecordModal";
import { Button, Spin, Alert, Modal, Input, message } from "antd";
import {
  EyeOutlined,
  UserOutlined,
  FileTextOutlined,
  CloseCircleOutlined,
} from "@ant-design/icons";
import { useGetAppointmentsTodayByDoctorIdQuery } from "../../modules/appointments/hooks/queries/use-get-appointments-today-by-doctor.query";
import { useSelector } from "react-redux";
import { RootState } from "../../shares/stores";
import { useEmergencyCancelAppointmentMutation } from "../../modules/appointments/hooks/mutations/use-emergency-cancel-appointment.mutation";
import { AppointmentStatus } from "../../modules/appointments/enums/appointment-status";
import { useQueryClient } from "@tanstack/react-query";
import { QueryKeyEnum } from "../../shares/enums/queryKey";
import { toast } from "react-toastify";

const DoctorConsultationPage: React.FC = () => {
  const [selectedAppointment, setSelectedAppointment] = useState<Appointment | null>(null);
  const [isProfileModalOpen, setIsProfileModalOpen] = useState(false);

  // State cho follow-up modal
  const [isFollowUpModalOpen, setIsFollowUpModalOpen] = useState(false);
  const [savedRecordId, setSavedRecordId] = useState<string>("");
  const [followUpAppointment, setFollowUpAppointment] = useState<Appointment | null>(null);
  const [showConfirmModal, setShowConfirmModal] = useState(false);

  // State cho view medical record modal
  const [isViewRecordModalOpen, setIsViewRecordModalOpen] = useState(false);
  const [viewingPatientId, setViewingPatientId] = useState<string>("");
  const [viewingPatientName, setViewingPatientName] = useState<string>("");

  // State cho cancel appointment modal
  const [isCancelModalOpen, setIsCancelModalOpen] = useState(false);
  const [cancelingAppointment, setCancelingAppointment] = useState<Appointment | null>(null);
  const [cancelReason, setCancelReason] = useState<string>("");

  const { doctor, userId } = useSelector((state: RootState) => state.auth);
  const doctorId = doctor?.doctor_id || "";
  const queryClient = useQueryClient();

  const { data, isLoading, isError } = useGetAppointmentsTodayByDoctorIdQuery(doctorId);

  const emergencyCancelMutation = useEmergencyCancelAppointmentMutation({
    onSuccess: (data) => {
      message.success(
        data.data?.note || "H·ªßy l·ªãch kh√°m th√†nh c√¥ng v√† t·ª± ƒë·ªông chuy·ªÉn ƒë·∫øn b√°c sƒ© thay th·∫ø!",
      );
      setIsCancelModalOpen(false);
      setCancelReason("");
      queryClient.invalidateQueries({
        queryKey: [QueryKeyEnum.Appointment, "today", doctorId],
      });
    },
    onError: (error: any) => {
      // Parse error message from response
      const errorMessage =
        error?.response?.data?.message || error?.message || "C√≥ l·ªói x·∫£y ra khi h·ªßy l·ªãch kh√°m!";

      toast.error("Kh√¥ng c√≥ b√°c sƒ© n√†o thay th·∫ø! Vui l√≤ng li√™n h·ªá v·ªõi admin ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.");
    },
  });

  // const {
  //   data: medicalRecordData,
  //   isLoading: isMedicalRecordLoading,
  //   isError: isMedicalRecordError,
  // } = useGetMedicalRecordByPatientIdQuery(appointment.patient_id, {
  //   enabled: !!appointment.patient_id,
  // });

  const handleViewPatientProfile = (appointment: Appointment) => {
    setSelectedAppointment(appointment);
    setIsProfileModalOpen(true);
  };

  const handleCloseProfileModal = () => {
    setIsProfileModalOpen(false);
    setSelectedAppointment(null);
  };

  const handleSaveSuccess = (recordId: string, appointment: Appointment) => {
    setSavedRecordId(recordId);
    setFollowUpAppointment(appointment);

    // Hi·ªÉn th·ªã confirm modal b·∫±ng state
    requestAnimationFrame(() => {
      requestAnimationFrame(() => {
        setShowConfirmModal(true);
      });
    });
  };

  const handleConfirmFollowUp = () => {
    console.log("üëç User ch·ªçn C√≥ - M·ªü FollowUpModal");
    setShowConfirmModal(false);
    setIsFollowUpModalOpen(true);
  };

  const handleCancelFollowUp = () => {
    console.log("üëé User ch·ªçn Kh√¥ng");
    setShowConfirmModal(false);
    setSavedRecordId("");
    setFollowUpAppointment(null);
  };

  const handleViewOldRecord = (patientId: string, patientName: string) => {
    setViewingPatientId(patientId);
    setViewingPatientName(patientName);
    setIsViewRecordModalOpen(true);
  };

  const handleCancelAppointment = (appointment: Appointment) => {
    setCancelingAppointment(appointment);
    setIsCancelModalOpen(true);
  };

  const handleConfirmCancel = () => {
    if (!cancelingAppointment) return;

    emergencyCancelMutation.mutate({
      appointment_id: cancelingAppointment.appointment_id,
      reason: cancelReason || "H·ªßy l·ªãch kh·∫©n c·∫•p",
    });
  };

  const handleCancelCancelModal = () => {
    setIsCancelModalOpen(false);
    setCancelingAppointment(null);
    setCancelReason("");
  };

  const inProgressAppointments = data?.data || [];

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-96">
        <Spin size="large" tip="ƒêang t·∫£i d·ªØ li·ªáu..." />
      </div>
    );
  }

  if (isError) {
    return (
      <Alert
        type="error"
        message="L·ªói t·∫£i d·ªØ li·ªáu"
        description="Kh√¥ng th·ªÉ t·∫£i danh s√°ch l·ªãch kh√°m h√¥m nay. Vui l√≤ng th·ª≠ l·∫°i sau."
        showIcon
        className="m-4"
      />
    );
  }

  return (
    <div className="p-6">
      <div className="mb-6 flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-800 mb-2">Danh s√°ch kh√°m b·ªánh</h1>
          <p className="text-gray-600">
            Danh s√°ch l·ªãch kh√°m h√¥m nay ({inProgressAppointments.length})
          </p>
        </div>
      </div>

      {inProgressAppointments.length === 0 ? (
        <div className="text-center py-12">
          <UserOutlined className="text-6xl text-gray-300 mb-4" />
          <h3 className="text-lg font-medium text-gray-500 mb-2">
            Kh√¥ng c√≥ l·ªãch kh√°m n√†o ƒëang di·ªÖn ra
          </h3>
          <p className="text-gray-400">Hi·ªán t·∫°i kh√¥ng c√≥ b·ªánh nh√¢n n√†o ƒëang ƒë∆∞·ª£c kh√°m</p>
        </div>
      ) : (
        <div className="grid gap-4">
          {inProgressAppointments.map((appointment) => (
            <div
              key={appointment.appointment_id}
              className="bg-white rounded-lg shadow-md border border-gray-200 p-6 hover:shadow-lg transition-shadow"
            >
              <div className="flex justify-between items-start">
                <div className="flex-1">
                  <div className="flex items-center gap-3 mb-3">
                    {appointment.patient?.image ? (
                      <img
                        src={appointment.patient.image}
                        alt={appointment.patient.full_name}
                        className="w-12 h-12 rounded-full object-cover border-2 border-blue-200"
                      />
                    ) : (
                      <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center">
                        <UserOutlined className="text-blue-600 text-xl" />
                      </div>
                    )}
                    <div>
                      <h3 className="text-lg font-semibold text-gray-800">
                        {appointment.patient?.full_name || "Kh√¥ng c√≥ th√¥ng tin"}
                      </h3>
                      <p className="text-sm text-gray-500">
                        M√£ l·ªãch: {appointment.appointment_code}
                      </p>
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
                    <div>
                      <p className="text-sm font-medium text-gray-600">D·ªãch v·ª•</p>
                      <p className="text-gray-800">{appointment.service_name || "Kh√¥ng c√≥"}</p>
                    </div>
                    <div>
                      <p className="text-sm font-medium text-gray-600">B·ªánh nh√¢n</p>
                      <p className="text-gray-800">{appointment.patient?.phone || "Kh√¥ng c√≥"}</p>
                    </div>
                    <div>
                      <p className="text-sm font-medium text-gray-600">Tr·∫°ng th√°i</p>
                      <p className="text-gray-800">
                        <span
                          className={`px-2 py-1 rounded text-sm ${
                            appointment.status === "PENDING"
                              ? "bg-yellow-100 text-yellow-800"
                              : appointment.status === "CONFIRMED"
                              ? "bg-green-100 text-green-800"
                              : appointment.status === "COMPLETED"
                              ? "bg-blue-100 text-blue-800"
                              : "bg-gray-100 text-gray-800"
                          }`}
                        >
                          {appointment.status === "PENDING"
                            ? "Ch·ªù x√°c nh·∫≠n"
                            : appointment.status === "CONFIRMED"
                            ? "ƒê√£ x√°c nh·∫≠n"
                            : appointment.status === "COMPLETED"
                            ? "Ho√†n th√†nh"
                            : appointment.status}
                        </span>
                      </p>
                    </div>
                    <div>
                      <p className="text-sm font-medium text-gray-600">Th·ªùi gian kh√°m</p>
                      <p className="text-gray-800">
                        {appointment.time_slots[0]?.start_time
                          ? new Date(appointment.time_slots[0].start_time).toLocaleTimeString(
                              "vi-VN",
                              {
                                hour: "2-digit",
                                minute: "2-digit",
                              },
                            )
                          : ""}{" "}
                        -{" "}
                        {appointment.time_slots[0]?.end_time
                          ? new Date(appointment.time_slots[0].end_time).toLocaleTimeString(
                              "vi-VN",
                              {
                                hour: "2-digit",
                                minute: "2-digit",
                              },
                            )
                          : ""}
                      </p>
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4 p-3 bg-gray-50 rounded-lg">
                    <div>
                      <p className="text-sm font-medium text-gray-600">ƒê·ªãa ch·ªâ</p>
                      <p className="text-gray-800 text-sm">
                        {appointment.patient?.address || "Kh√¥ng c√≥"}
                      </p>
                    </div>
                    <div>
                      <p className="text-sm font-medium text-gray-600">Email</p>
                      <p className="text-gray-800 text-sm">
                        {appointment.patient?.email || "Kh√¥ng c√≥"}
                      </p>
                    </div>
                  </div>

                  {appointment.notes && appointment.notes.trim() !== "" && (
                    <div className="mb-4">
                      <p className="text-sm font-medium text-gray-600">Ghi ch√∫</p>
                      <p className="text-gray-800 bg-amber-50 p-2 rounded border-l-4 border-amber-400">
                        {appointment.notes}
                      </p>
                    </div>
                  )}
                </div>

                <div className="flex flex-col gap-2 ml-4">
                  <Button
                    type="primary"
                    icon={<EyeOutlined />}
                    onClick={() => handleViewPatientProfile(appointment)}
                    size="large"
                    className="flex items-center gap-2"
                  >
                    T·∫°o h·ªì s∆°
                  </Button>

                  {/* N√∫t xem h·ªì s∆° c≈© */}
                  <Button
                    icon={<FileTextOutlined />}
                    onClick={() =>
                      handleViewOldRecord(
                        appointment.patient_id,
                        appointment.patient?.full_name || "B·ªánh nh√¢n",
                      )
                    }
                    size="large"
                    className="flex items-center gap-2"
                  >
                    Xem h·ªì s∆° c≈©
                  </Button>

                  {/* N√∫t h·ªßy l·ªãch - ch·ªâ hi·ªán khi status PENDING ho·∫∑c CONFIRMED */}
                  {(appointment.status === AppointmentStatus.PENDING ||
                    appointment.status === AppointmentStatus.CONFIRMED) && (
                    <Button
                      danger
                      icon={<CloseCircleOutlined />}
                      onClick={() => handleCancelAppointment(appointment)}
                      size="large"
                      className="flex items-center gap-2"
                    >
                      H·ªßy l·ªãch
                    </Button>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {selectedAppointment && (
        <PatientProfileModal
          appointment={selectedAppointment}
          isOpen={isProfileModalOpen}
          onClose={handleCloseProfileModal}
          onSaveSuccess={handleSaveSuccess}
        />
      )}

      {/* Confirm Modal - H·ªèi c√≥ mu·ªën t·∫°o l·ªãch t√°i kh√°m kh√¥ng */}
      <Modal
        title="T·∫°o h·ªì s∆° th√†nh c√¥ng!"
        open={showConfirmModal}
        onOk={handleConfirmFollowUp}
        onCancel={handleCancelFollowUp}
        okText="C√≥, t·∫°o l·ªãch t√°i kh√°m"
        cancelText="Kh√¥ng, ƒë√≥ng l·∫°i"
        centered
      >
        <p>B·∫°n c√≥ mu·ªën t·∫°o l·ªãch h·∫πn t√°i kh√°m cho b·ªánh nh√¢n kh√¥ng?</p>
      </Modal>

      {/* Follow-up Modal - Render ·ªü ngo√†i ƒë·ªÉ kh√¥ng b·ªã unmount */}
      {followUpAppointment && (
        <FollowUpModal
          isOpen={isFollowUpModalOpen}
          onClose={() => {
            setIsFollowUpModalOpen(false);
            setSavedRecordId("");
            setFollowUpAppointment(null);
          }}
          patientId={followUpAppointment.patient_id}
          patientName={followUpAppointment.patient.full_name}
          doctorId={followUpAppointment.doctor_id || ""}
          hospitalId={followUpAppointment.hospital_id}
          bookUserId={followUpAppointment.patient?.user_id || ""}
          relatedRecordId={savedRecordId}
        />
      )}

      {/* View Medical Record Modal */}
      {viewingPatientId && (
        <ViewMedicalRecordModal
          isOpen={isViewRecordModalOpen}
          onClose={() => {
            setIsViewRecordModalOpen(false);
            setViewingPatientId("");
            setViewingPatientName("");
          }}
          patientId={viewingPatientId}
          patientName={viewingPatientName}
        />
      )}

      {/* Cancel Appointment Modal */}
      <Modal
        title="X√°c nh·∫≠n h·ªßy l·ªãch kh√°m"
        open={isCancelModalOpen}
        onOk={handleConfirmCancel}
        onCancel={handleCancelCancelModal}
        okText="X√°c nh·∫≠n h·ªßy"
        cancelText="H·ªßy"
        okButtonProps={{ danger: true, loading: emergencyCancelMutation.isPending }}
        centered
      >
        <div className="space-y-4">
          {cancelingAppointment && (
            <>
              <p className="text-gray-700 mb-2">
                B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy l·ªãch kh√°m c·ªßa b·ªánh nh√¢n{" "}
                <strong>{cancelingAppointment.patient?.full_name}</strong>?
              </p>
              <div className="bg-gray-50 p-3 rounded">
                <p className="text-sm text-gray-600 mb-1">
                  <strong>M√£ l·ªãch:</strong> {cancelingAppointment.appointment_code}
                </p>
                <p className="text-sm text-gray-600 mb-1">
                  <strong>D·ªãch v·ª•:</strong> {cancelingAppointment.service_name || "Kh√°m t·ªïng qu√°t"}
                </p>
                <p className="text-sm text-gray-600">
                  <strong>Th·ªùi gian:</strong>{" "}
                  {cancelingAppointment.time_slots[0]?.start_time &&
                    new Date(cancelingAppointment.time_slots[0].start_time).toLocaleString("vi-VN")}
                </p>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  L√Ω do h·ªßy (t√πy ch·ªçn):
                </label>
                <Input.TextArea
                  rows={3}
                  placeholder="V√≠ d·ª•: C√≥ ca kh√°m g·∫•p, b√°c sƒ© ngh·ªâ ph√©p..."
                  value={cancelReason}
                  onChange={(e) => setCancelReason(e.target.value)}
                />
              </div>
            </>
          )}
        </div>
      </Modal>
    </div>
  );
};

export default DoctorConsultationPage;
